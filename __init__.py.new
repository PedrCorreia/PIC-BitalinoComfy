# filepath: c:\Users\corre\ComfyUI\custom_nodes\PIC-2025\__init__.py
# Consolidated initialization file for PIC-2025 extension

# Initialize node mapping dictionaries
NODE_CLASS_MAPPINGS = {}
NODE_DISPLAY_NAME_MAPPINGS = {}
NODE_CATEGORY_MAPPINGS = {}
IMPORT_ERROR_MESSAGE = "PIC nodes: failed to import"

# Define new categories with emojis
# Main categories: Pedro_PIC/üß∞ Tools, Pedro_PIC/üî¨ Processing, Pedro_PIC/üî¨ Bio-Processing, Pedro_PIC/üì° Bitalino

print("[DEBUG-INIT] Loading PIC-2025 custom nodes package")

# Load base plot module
try:
    from .src.plot.plot import PygamePlot
    PYGAME_PLOT_AVAILABLE = True
    print("PygamePlot base class loaded successfully")
except ImportError as e:
    PYGAME_PLOT_AVAILABLE = False
    print(f"{IMPORT_ERROR_MESSAGE} PygamePlot base class: ImportError - {e}")
except Exception as e:
    PYGAME_PLOT_AVAILABLE = False
    print(f"{IMPORT_ERROR_MESSAGE} PygamePlot base class: {type(e).__name__} - {e}")

# Load Plot Registry System
try:
    from .src.plot.plot_registry import PlotRegistry
    from .src.plot.plot_registry_integration import PlotRegistryIntegration
    print("PlotRegistry system loaded successfully")
except ImportError as e:
    print(f"{IMPORT_ERROR_MESSAGE} PlotRegistry system: ImportError - {e}")
except Exception as e:
    print(f"{IMPORT_ERROR_MESSAGE} PlotRegistry system: {type(e).__name__} - {e}")

# ----- REGISTRY RELATED NODES -----

# Signal Registry Connector
try:
    from .comfy.signal_registry_connector import SignalRegistryConnector
    NODE_CLASS_MAPPINGS["SignalRegistryConnector"] = SignalRegistryConnector
    NODE_DISPLAY_NAME_MAPPINGS["SignalRegistryConnector"] = "üîó Signal Registry Connector"
    NODE_CATEGORY_MAPPINGS["SignalRegistryConnector"] = "Pedro_PIC/üß∞ Registry"
    print("Signal Registry Connector node loaded successfully")
except ImportError as e:
    print(f"{IMPORT_ERROR_MESSAGE} Signal Registry Connector: ImportError - {e}")
except Exception as e:
    print(f"{IMPORT_ERROR_MESSAGE} Signal Registry Connector: {type(e).__name__} - {e}")

# Registry Plot Node
try:
    from .comfy.registry_plot_node import RegistryPlotNode
    NODE_CLASS_MAPPINGS["RegistryPlotNode"] = RegistryPlotNode
    NODE_DISPLAY_NAME_MAPPINGS["RegistryPlotNode"] = "üìä Registry Plot"
    NODE_CATEGORY_MAPPINGS["RegistryPlotNode"] = "Pedro_PIC/üß∞ Registry"
    print("Registry Plot Node loaded successfully")
except ImportError as e:
    print(f"{IMPORT_ERROR_MESSAGE} Registry Plot Node: ImportError - {e}")
except Exception as e:
    print(f"{IMPORT_ERROR_MESSAGE} Registry Plot Node: {type(e).__name__} - {e}")

# Registry Signal Generator
try:
    from .comfy.registry_signal_generator import RegistrySignalGenerator
    NODE_CLASS_MAPPINGS["RegistrySignalGenerator"] = RegistrySignalGenerator
    NODE_DISPLAY_NAME_MAPPINGS["RegistrySignalGenerator"] = "üìà Registry Signal Generator"
    NODE_CATEGORY_MAPPINGS["RegistrySignalGenerator"] = "Pedro_PIC/üß∞ Registry"
    print("Registry Signal Generator loaded successfully")
except ImportError as e:
    print(f"{IMPORT_ERROR_MESSAGE} Registry Signal Generator: ImportError - {e}")
except Exception as e:
    print(f"{IMPORT_ERROR_MESSAGE} Registry Signal Generator: {type(e).__name__} - {e}")

# Registry Synthetic Generator
try:
    from .comfy.registry_synthetic_generator import RegistrySyntheticGenerator
    NODE_CLASS_MAPPINGS["RegistrySyntheticGenerator"] = RegistrySyntheticGenerator
    NODE_DISPLAY_NAME_MAPPINGS["RegistrySyntheticGenerator"] = "üìä Registry Synthetic Generator"
    NODE_CATEGORY_MAPPINGS["RegistrySyntheticGenerator"] = "Pedro_PIC/üß∞ Registry"
    print("Registry Synthetic Generator loaded successfully")
except ImportError as e:
    print(f"{IMPORT_ERROR_MESSAGE} Registry Synthetic Generator: ImportError - {e}")
except Exception as e:
    print(f"{IMPORT_ERROR_MESSAGE} Registry Synthetic Generator: {type(e).__name__} - {e}")

# Signal Debug Node
try:
    from .comfy.signal_debug_node import SignalDebugNode
    NODE_CLASS_MAPPINGS["SignalDebugNode"] = SignalDebugNode
    NODE_DISPLAY_NAME_MAPPINGS["SignalDebugNode"] = "üîç Signal Debug"
    NODE_CATEGORY_MAPPINGS["SignalDebugNode"] = "Pedro_PIC/üß∞ Registry"
    print("Signal Debug Node loaded successfully")
except ImportError as e:
    print(f"{IMPORT_ERROR_MESSAGE} Signal Debug Node: ImportError - {e}")
except Exception as e:
    print(f"{IMPORT_ERROR_MESSAGE} Signal Debug Node: {type(e).__name__} - {e}")

# Logger Node
try:
    from .comfy.logger_node import LoggerNode
    NODE_CLASS_MAPPINGS["LoggerNode"] = LoggerNode
    NODE_DISPLAY_NAME_MAPPINGS["LoggerNode"] = "üìù Signal Logger"
    NODE_CATEGORY_MAPPINGS["LoggerNode"] = "Pedro_PIC/üß∞ Registry"
    print("Logger Node loaded successfully")
except ImportError as e:
    print(f"{IMPORT_ERROR_MESSAGE} Logger Node: ImportError - {e}")
except Exception as e:
    print(f"{IMPORT_ERROR_MESSAGE} Logger Node: {type(e).__name__} - {e}")

# ----- REGULAR NODES -----

# Signal Processing Nodes
try:
    from .comfy.signalprocessing import (
        MovingAverageFilter,
        SignalFilter,
        LoadSignalNode,
    )
    
    # Register nodes with consistent categories
    nodes = {
        "MovingAverageFilter": ("üìâ Moving Average Filter", "Pedro_PIC/üî¨ Processing"),
        "SignalFilter": ("üîç Signal Filter", "Pedro_PIC/üî¨ Processing"),
        "LoadSignalNode": ("üìÇ Load Signal", "Pedro_PIC/üî¨ Processing"),
    }
    
    for node_name, (display_name, category) in nodes.items():
        node_class = locals()[node_name]
        NODE_CLASS_MAPPINGS[node_name] = node_class
        NODE_DISPLAY_NAME_MAPPINGS[node_name] = display_name
        NODE_CATEGORY_MAPPINGS[node_name] = category
    
    print("Signal Processing Nodes loaded successfully")
except ImportError as e:
    print(f"{IMPORT_ERROR_MESSAGE} SignalProcessing Nodes: ImportError - {e}")
except Exception as e:
    print(f"{IMPORT_ERROR_MESSAGE} SignalProcessing Nodes: {type(e).__name__} - {e}")

# Bio Processing Nodes
try:
    from .comfy.ecg import ECGNode
    from .comfy.rr import RRNode
    from .comfy.eda import EDANode
    
    # Register nodes with consistent categories
    bio_nodes = {
        "ECGNode": ("‚ù§Ô∏è ECG Processing", "Pedro_PIC/üî¨ Bio-Processing"),
        "RRNode": ("ü´Å RR Processing", "Pedro_PIC/üî¨ Bio-Processing"),
        "EDANode": ("üíß EDA Processing", "Pedro_PIC/üî¨ Bio-Processing"),
    }
    
    for node_name, (display_name, category) in bio_nodes.items():
        node_class = locals()[node_name]
        NODE_CLASS_MAPPINGS[node_name] = node_class
        NODE_DISPLAY_NAME_MAPPINGS[node_name] = display_name
        NODE_CATEGORY_MAPPINGS[node_name] = category
    
    print("Bio-Processing Nodes loaded successfully")
except ImportError as e:
    print(f"{IMPORT_ERROR_MESSAGE} Bio-Processing Nodes: ImportError - {e}")
except Exception as e:
    print(f"{IMPORT_ERROR_MESSAGE} Bio-Processing Nodes: {type(e).__name__} - {e}")

# Bitalino Receiver
try:
    from .comfy.bitalino_receiver_node import LRBitalinoReceiver
    NODE_CLASS_MAPPINGS["LR BitalinoReceiver_Alt"] = LRBitalinoReceiver
    NODE_DISPLAY_NAME_MAPPINGS["LR BitalinoReceiver_Alt"] = "üì° Bitalino Receiver"
    NODE_CATEGORY_MAPPINGS["LR BitalinoReceiver_Alt"] = "Pedro_PIC/üì° Bitalino"
    
    print("Bitalino Receiver loaded successfully")
except Exception as e:
    print(f"{IMPORT_ERROR_MESSAGE} Bitalino Receiver: {e}")

# Import synthetic data generator node
try:
    from .comfy.synthetic_generator import SynthNode
    NODE_CLASS_MAPPINGS["SynthNode"] = SynthNode
    NODE_DISPLAY_NAME_MAPPINGS["SynthNode"] = "üìä Synthetic Data Generator"
    NODE_CATEGORY_MAPPINGS["SynthNode"] = "Pedro_PIC/üß∞ Tools"
    
    print("Synthetic Data Generator loaded successfully")
except ImportError as e:
    print(f"{IMPORT_ERROR_MESSAGE} SynthNode: ImportError - {e}")
except Exception as e:
    print(f"{IMPORT_ERROR_MESSAGE} SynthNode: {type(e).__name__} - {e}")

# Tools and utility nodes
try:
    from .comfy.tools import CombineNode, SeparateNode, GetLastValueNode, IsPeakNode
    
    # Register tools with consistent categories
    tool_nodes = {
        "CombineNode": ("üîó Combine Signal Components", "Pedro_PIC/üß∞ Tools"),
        "SeparateNode": ("‚úÇÔ∏è Separate Signal Components", "Pedro_PIC/üß∞ Tools"),
        "GetLastValueNode": ("üìä Get Last Signal Value", "Pedro_PIC/üß∞ Tools"),
        "IsPeakNode": ("‚ö° Is Peak", "Pedro_PIC/üß∞ Tools"),
    }
    
    for node_name, (display_name, category) in tool_nodes.items():
        node_class = locals()[node_name]
        NODE_CLASS_MAPPINGS[node_name] = node_class
        NODE_DISPLAY_NAME_MAPPINGS[node_name] = display_name
        NODE_CATEGORY_MAPPINGS[node_name] = category
    
    print("Tools nodes loaded successfully")
except ImportError as e:
    print(f"{IMPORT_ERROR_MESSAGE} Tools nodes: ImportError - {e}")
except Exception as e:
    print(f"{IMPORT_ERROR_MESSAGE} Tools nodes: {type(e).__name__} - {e}")

# Add Arousal nodes
try:
    from .comfy.arousal import PhysioNormalizeNode
    
    # Register arousal nodes with consistent categories
    arousal_nodes = {
        "PhysioNormalizeNode": ("üìè Physio Normalize", "Pedro_PIC/üß≠ Arousal"),
    }
    
    for node_name, (display_name, category) in arousal_nodes.items():
        node_class = locals()[node_name]
        NODE_CLASS_MAPPINGS[node_name] = node_class
        NODE_DISPLAY_NAME_MAPPINGS[node_name] = display_name
        NODE_CATEGORY_MAPPINGS[node_name] = category
    
    print("Arousal nodes loaded successfully")
except ImportError as e:
    print(f"{IMPORT_ERROR_MESSAGE} Arousal nodes: ImportError - {e}")
except Exception as e:
    print(f"{IMPORT_ERROR_MESSAGE} Arousal nodes: {type(e).__name__} - {e}")

# Plot Unit Node
try:
    from .comfy.plot_unit_node import PlotUnitNode
    
    # Register Plot Unit node with consistent category
    NODE_CLASS_MAPPINGS["PlotUnitNode"] = PlotUnitNode
    NODE_DISPLAY_NAME_MAPPINGS["PlotUnitNode"] = "üìä Signal Visualization Hub"
    NODE_CATEGORY_MAPPINGS["PlotUnitNode"] = "Pedro_PIC/üß∞ Tools"
    
    print("Plot Unit Visualization Hub loaded successfully")
except ImportError as e:
    print(f"{IMPORT_ERROR_MESSAGE} Plot Unit Node: ImportError - {e}")
except Exception as e:
    print(f"{IMPORT_ERROR_MESSAGE} Plot Unit Node: {type(e).__name__} - {e}")

# Mock Signal Generator
try:
    from .comfy.mock_signal_node import MockSignalGenerator
    NODE_CLASS_MAPPINGS["MockSignalNode"] = MockSignalGenerator
    NODE_DISPLAY_NAME_MAPPINGS["MockSignalNode"] = "üìä Mock Signal Generator"
    NODE_CATEGORY_MAPPINGS["MockSignalNode"] = "Pedro_PIC/üß∞ Tools" 
    print("Mock Signal Generator loaded successfully")
except ImportError as e:
    print(f"{IMPORT_ERROR_MESSAGE} Mock Signal Node: ImportError - {e}")
except Exception as e:
    print(f"{IMPORT_ERROR_MESSAGE} Mock Signal Node: {type(e).__name__} - {e}")

# Signal Connector Node
try:
    from .comfy.signal_connector_node import SignalConnectorNode
    NODE_CLASS_MAPPINGS["SignalConnectorNode"] = SignalConnectorNode
    NODE_DISPLAY_NAME_MAPPINGS["SignalConnectorNode"] = "üîó Signal Connector"
    NODE_CATEGORY_MAPPINGS["SignalConnectorNode"] = "Pedro_PIC/üß∞ Tools" 
    print("Signal Connector loaded successfully")
except ImportError as e:
    print(f"{IMPORT_ERROR_MESSAGE} Signal Connector Node: ImportError - {e}")
except Exception as e:
    print(f"{IMPORT_ERROR_MESSAGE} Signal Connector Node: {type(e).__name__} - {e}")

# Signal Input Node
try:
    from .comfy.signal_input_node import SignalInputNode
    NODE_CLASS_MAPPINGS["SignalInputNode"] = SignalInputNode
    NODE_DISPLAY_NAME_MAPPINGS["SignalInputNode"] = "üì• Signal Input"
    NODE_CATEGORY_MAPPINGS["SignalInputNode"] = "Pedro_PIC/üß∞ Tools" 
    print("Signal Input Node loaded successfully")
except ImportError as e:
    print(f"{IMPORT_ERROR_MESSAGE} Signal Input Node: ImportError - {e}")
except Exception as e:
    print(f"{IMPORT_ERROR_MESSAGE} Signal Input Node: {type(e).__name__} - {e}")

# Debug reset of the registry (uncomment if needed for debugging)
# PlotRegistry.get_instance().reset()

print(f"[DEBUG-INIT] Total registered nodes: {len(NODE_CLASS_MAPPINGS)}")
print("[DEBUG-INIT] PIC-2025 nodes loaded successfully")
