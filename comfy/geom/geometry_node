import sys
import os

# Calculate the project root directory (PIC-BitalinoComfy) and add it to sys.path
# __file__ is /home/lugo/ComfyUI/custom_nodes/PIC-BitalinoComfy/comfy/geom/geometry_node
# os.path.dirname(__file__) is /home/lugo/ComfyUI/custom_nodes/PIC-BitalinoComfy/comfy/geom
# We need to go up two levels to reach PIC-BitalinoComfy
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# Now use absolute imports from the project root
from src.geometry.render3d import Render3D
from src.geometry.geom import Sphere, Cube

class GeometryRenderNode:
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "object_type": (["sphere", "cube"],),
                "size": ("FLOAT", {"default": 1.0, "min": 0.1, "max": 10.0}),
                "rotation_deg": ("FLOAT", {"default": 0.0, "min": 0.0, "max": 360.0}),
                "z_distance": ("FLOAT", {"default": 5.0, "min": 0.1, "max": 20.0}),
                "img_size": ("INT", {"default": 256, "min": 64, "max": 1024}),
                "color": ("STRING", {"default": "#FFD700"}),
            }
        }

    RETURN_TYPES = ("IMAGE", "DEPTH")
    RETURN_NAMES = ("image", "depth")

    FUNCTION = "render"

    CATEGORY = "geometry"

    def render(self, object_type, size, rotation_deg, z_distance, img_size, color):
        # Camera setup: looking at origin from +z
        camera_position = [(0, 0, z_distance), (0, 0, 0), (0, 1, 0)]
        r3d = Render3D(img_size=img_size, background='white')
        # Geometry selection
        if object_type == "sphere":
            geom = Sphere(center=(0, 0, 0), radius=size, quality='medium')
        elif object_type == "cube":
            geom = Cube(center=(0, 0, 0), width=size, rotation=(0, rotation_deg, 0)) # Assuming rotation_deg is for Y-axis
        else:
            raise ValueError(f"Unknown object_type: {object_type}")
        r3d.add_geometry(geom, color=color, opacity=1)
        img = r3d.render(output="", show_edges=False, camera_position=camera_position)
        # Depth map
        depth = r3d.render_depth(camera_position=camera_position)
        # Normalize depth to 0-255 for display
        if depth.max() > depth.min():
            depth_norm = (depth - depth.min()) / (depth.max() - depth.min())
        else:
            depth_norm = depth - depth.min() # Avoid division by zero if depth is flat
        depth_img = (depth_norm * 255).astype("uint8")
        return (img, depth_img)

# Node registration for ComfyUI
NODE_CLASS_MAPPINGS = {
    "GeometryRenderNode": GeometryRenderNode,
}
NODE_DISPLAY_NAME_MAPPINGS = {
    "GeometryRenderNode": "Geometry Render (3D)",
}

if __name__ == "__main__":
    # Test the node directly
    node = GeometryRenderNode()
    # Ensure Pillow is imported if not already
    try:
        from PIL import Image
    except ImportError:
        print("Pillow (PIL) is not installed. Please install it: pip install Pillow")
        sys.exit(1)
        
    print(f"Attempting to render with parameters: object_type='sphere', size=1.0, rotation_deg=45.0, z_distance=5.0, img_size=256, color='#FFD700'")
    img_array, depth_array = node.render(object_type="sphere", size=1.0, rotation_deg=45.0, z_distance=5.0, img_size=256, color="#FFD700")
    
    # Ensure the output directory exists or save in the current script's directory
    output_dir = os.path.dirname(__file__)
    sphere_path = os.path.join(output_dir, "test_sphere.png")
    depth_path = os.path.join(output_dir, "test_depth.png")

    Image.fromarray(img_array).save(sphere_path)
    Image.fromarray(depth_array).save(depth_path)
    print(f"Test images saved to {sphere_path} and {depth_path}")
